// ./prisma/schema.prisma

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  notes         Notes[]
  folders       Folder[]
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notes {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  note     String
  title    String
  Folder   Folder? @relation(fields: [folderId], references: [id])
  folderId String? @db.ObjectId
  User     User?   @relation(fields: [userId], references: [id])
  userId   String? @db.ObjectId
}

model Folder {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  parentId String?  @db.ObjectId
  parent   Folder?  @relation("TeacherStudents", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  child    Folder[] @relation("TeacherStudents")
  Notes    Notes[]
  notesId  String?  @db.ObjectId
  User     User?    @relation(fields: [userId], references: [id])
  userId   String?  @db.ObjectId
}

model Reminder {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  killId   Int @unique
  textContent String
  dateContent String
}
